"""filebites.py
Scripts, functions, etc. related to file management
"""

import os
import PyPDF2
from PyPDF2 import PdfFileMerger, PdfFileReader

from pathlib import Path
import os
import shutil

def file_pdf_merge(list_of_files, merged_pdf):
"""Merge several *.pdf files into a single file.
  list_of_files: list containing strings containing the full "PATHNAME/FILENAME.pdf". 
      ex: list_of_files = ['C:/Mydocs/file1.pdf', 'C:/Mydocs/file2.pdf']
  merged_pdf: the filepath and file name of the merged pdf file
  Dependencies:
  import os
  from PyPDF2 import PdfFileReader, PdfFileMerger
"""
    merger = PdfFileMerger()
    for fname in list_of_files:
        append_fpath = os.path.abspath(fname) #Map to OS-independent file path
        f = open(append_fpath, 'rb')          #Open Current File
        merger.append(PdfFileReader(f))       #Append
        f.close()             
    merger.write(merged_pdf)


def files_in_directory(dir_path):
    """Given a directory path, return a list of all files in directory
      dir_path: string representing the file path of the directory to inventory
      Dependencies:
      import os
    """
    file_names = []
    for filename in os.listdir(dir_path):
    #uncomment below to include and sort files by creation date
    #    created_date = os.path.getctime(dir_path + '\\' + filename)
    #    file_names.append((filename, created_date))
        file_names.append(filename)
        
    return sorted(file_names, key=lambda item: item[1])   #sort by time


def copy(src, dest):
"""Copy full hierarchical directories.
From: https://www.pythoncentral.io/how-to-recursively-copy-a-directory-folder-in-python/
start_dir = r'C:\Py'
moveto_dir = r'C:\move\MitchPy'
skip_dirs = [r'venv', r'.idea', r'.git', r'__pycache__',
             'venvEvan', 'lib', 'share', '.gitignore', 'components',
             'etc', 'Include', 'scripts', 'chromedriver',
             'tcl', 'selenium']
"""

    try:
        shutil.copytree(src, dest, ignore=shutil.ignore_patterns(*skip_dirs))
    except OSError as e:
        # If the error was caused because the source wasn't a directory
        if e.errno == errno.ENOTDIR:
            shutil.copy(src, dest)
        else:
            print('Directory not copied. Error: %s' % e)
